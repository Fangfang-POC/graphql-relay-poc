input AddUserInput {
  age: Int
  name: String
}

type Airplane implements Vehicle {
  maxSpeed: Int
  wingspan: Int
}

type Car implements Vehicle {
  licensePlate: String
  maxSpeed: Int
}

type Cat {
  gender: String
  length: Int
  name: String
}

type Dog {
  age: Int
  gender: String
  weight: Int
}

type Faction implements Node {
  id: ID!
  name: String
  ships: ShipConnection
}

enum Gender {
  FEMALE
  MALE
}

type Human {
  age: Int
  name: String
}

type Mutation {
  addUser(input: AddUserInput): User
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  empire: Faction
  node(id: ID!): Node
  rebels(id: ID!): Faction
  search: [SearchResult]
  user(id: ID!): User
  users: [User]
  vehicles: [Vehicle]
}

union SearchResult = Cat | Dog | Human

type Ship implements Node {
  id: ID!
  name: String
}

type ShipConnection {
  edges: [ShipEdge]
  pageInfo: PageInfo!
}

type ShipEdge {
  cursor: String!
  node: Ship
}

type Subscription {
  userAdded: User
}

type User {
  age: Int
  gender: Gender
  id: ID!
  name: String
  username: String
}

interface Vehicle {
  maxSpeed: Int
}
